//go:build mage

package main

import (
	"fmt"
	"github.com/magefile/mage/mg"
	"github.com/magefile/mage/sh"
	"strings"
	"time"
)

const Module = "github.com/traggo/server"

const BuildDir = "build"
const BuildDirWeb = "web/dist"

const MainFileCli = "cmd/cli/main.go"
const MainFileServer = "cmd/server/main.go"
const ExecFileCli = BuildDir + "/traggo-cli"
const ExecFileServer = BuildDir + "/traggo-server"

type Clean mg.Namespace
type Build mg.Namespace
type Run mg.Namespace

var Aliases = map[string]interface{}{
	"clean": Clean.All,
	"build": Build.All,
}

func (c Clean) All() {
	mg.Deps(c.Serv, c.Web)
}

func (Clean) Serv() error {
	err := sh.Rm(BuildDir)
	if err != nil {
		return fmt.Errorf("failed to remove server build dir: %w", err)
	}
	return nil
}

func (Clean) Web() error {
	err := sh.Rm(BuildDirWeb)
	if err != nil {
		return fmt.Errorf("failed to remove web build dir: %w", err)
	}
	return nil
}

func Install() error {
	err := sh.RunV("bun", "install")
	if err != nil {
		return fmt.Errorf("failed to install js dependencies via bun: %w", err)
	}
	return nil
}

func (b Build) All() {
	mg.Deps(b.CLI, b.Serv, b.Web)
}

func (b Build) CLI(mode string) error {
	flags := flags("build", mode)
	flags = append(flags, "-o", ExecFileCli, MainFileCli)
	err := sh.RunV("go", flags...)
	if err != nil {
		return fmt.Errorf("failed to build cli: %s %w", mode, err)
	}
	return nil
}

func (b Build) Serv(mode string) error {
	mg.Deps(b.Web())
	flags := flags("build", mode)
	err := sh.RunV("go", flags...)
	if err != nil {
		return fmt.Errorf("failed to build go: %s %w", mode, err)
	}
	return nil
}

func (Build) Web() error {
	err := sh.RunV("sh", "-c", "cd web && bun build")
	if err != nil {
		return fmt.Errorf("failed to build web: %w", err)
	}
	return nil
}

func (Run) Serv(mode string) error {
	flags := flags("run", mode)
	err := sh.RunV("go", flags...)
	if err != nil {
		return fmt.Errorf("failed to run go: %w", err)
	}
	return nil
}

func (Run) Web() error {
	err := sh.RunV("sh", "-c", "cd web && bun serve")
	if err != nil {
		return fmt.Errorf("failed to run web: %w", err)
	}
	return nil
}

func Docker() error {
	return nil
}

func flags(cmd string, mode string) []string {
	var flags = []string{cmd}

	//var target = "server"
	var tags = ""
	var ldflags = ""

	for _, m := range strings.Split(mode, ",") {
		switch m {
		case "dev":
			tags = tags + "dev "
		case "prod":
			tags = tags + "prod "

		case "static":
			ldflags = ldflags + " -linkmode external -extldflags '-static'"
		case "info":
			ldflags = ldflags +
				" -X " + Module + "/environment.BuildDate=" + date() +
				" -X " + Module + "/environment.BuildCommit=" + commit() +
				" -X " + Module + "/environment.BuildVersion=" + version()

			/*		case "cli":
						target = "cli"
					case "server":
						target = "server"*/
		}
	}

	if tags != "" {
		flags = append(flags, "-tags", tags)
	}

	if ldflags != "" {
		flags = append(flags, "-ldflags", ldflags)
	}

	/*	switch target {
		case "cli":
			flags = append(flags, "-o", ExecFileCli, MainFileCli)
		case "server":
			flags = append(flags, "-o", ExecFileServer, MainFileServer)
		}*/

	return flags
}

func commit() string {
	output, err := sh.Output("git", "rev-parse", "--verify", "HEAD")
	if err != nil {
		fmt.Println("failed to get current git commit: %w", err)
		return ""
	}
	return output
}

func date() string {
	return time.Now().Format("%Y-%m-%dT%H:%M:%SZ")
}

func version() string {
	output, err := sh.Output("git", "describe", "--tags", "--abbrev=0")
	if err != nil {
		fmt.Println("failed to get current git tag: %w", err)
		return ""
	}
	return output
}
